diff -Nu tcptrack-1.4.2/src/Makefile.am tcptrack-1.4.2.ossim/src/Makefile.am
--- tcptrack-1.4.2/src/Makefile.am	2010-09-28 01:02:01.000000000 +0200
+++ tcptrack-1.4.2.ossim/src/Makefile.am	2011-09-12 14:19:12.000000000 +0200
@@ -8,8 +8,8 @@
                  TCPHeader.cc TCPCapture.cc \
                  TCPTrack.cc SocketPair.cc \
 								 IPAddress.cc \
-                 AppError.cc PcapError.cc GenericError.cc Guesser.cc
-
+		 AppError.cc PcapError.cc GenericError.cc Guesser.cc \
+                                TCPListener.cc
 noinst_HEADERS = Collector.h PacketBuffer.h TextUI.h \
 								 defs.h Sniffer.h headers.h \
 								 SortedIterator.h util.h TCContainer.h \
@@ -18,7 +18,8 @@
 								 TCPHeader.h TCPCapture.h \
 								 TCPTrack.h SocketPair.h \
 								 IPAddress.h \
-								 AppError.h PcapError.h GenericError.h
+								 AppError.h PcapError.h GenericError.h \
+							               TCPListener.h
 
 man_MANS = tcptrack.1
 
diff -Nu tcptrack-1.4.2/src/Makefile.in tcptrack-1.4.2.ossim/src/Makefile.in
--- tcptrack-1.4.2/src/Makefile.in	2011-08-03 19:37:02.000000000 +0200
+++ tcptrack-1.4.2.ossim/src/Makefile.in	2011-09-12 14:21:19.000000000 +0200
@@ -54,7 +54,9 @@
 	IPv4Address.$(OBJEXT) IPv6Address.$(OBJEXT) \
 	TCPHeader.$(OBJEXT) TCPCapture.$(OBJEXT) TCPTrack.$(OBJEXT) \
 	SocketPair.$(OBJEXT) IPAddress.$(OBJEXT) AppError.$(OBJEXT) \
-	PcapError.$(OBJEXT) GenericError.$(OBJEXT) Guesser.$(OBJEXT)
+	PcapError.$(OBJEXT) GenericError.$(OBJEXT) Guesser.$(OBJEXT) \
+        TCPListener.$(OBJEXT)
+
 tcptrack_OBJECTS = $(am_tcptrack_OBJECTS)
 tcptrack_LDADD = $(LDADD)
 DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
diff -Nu tcptrack-1.4.2/src/TCPListener.cc tcptrack-1.4.2.ossim/src/TCPListener.cc
--- tcptrack-1.4.2/src/TCPListener.cc	1970-01-01 01:00:00.000000000 +0100
+++ tcptrack-1.4.2.ossim/src/TCPListener.cc	2011-09-12 14:36:17.000000000 +0200
@@ -0,0 +1,208 @@
+/* 
+ *  Ths code in this file is part of tcptrack. For more information see
+ *    http://www.rhythm.cx/~steve/devel/tcptrack
+ *
+ *     Copyright (C) Steve Benson - 2003
+ *
+ *  tcptrack is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your
+ *  option) any later version.
+ *   
+ *  tcptrack is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *   
+ *  You should have received a copy of the GNU General Public License
+ *  along with GNU Make; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 
+ *  
+ */
+#include "TCPListener.h"
+#include <stdio.h>
+#include <string.h>
+#include <assert.h>
+#include <stdlib.h>
+#include <signal.h>
+#include <iostream>
+#include <arpa/inet.h>
+#include "util.h"
+#include "defs.h"
+#include "IPv4Address.h"
+#include "TCPTrack.h"
+#include "GenericError.h"
+
+extern TCPTrack *app; 
+
+TCPListener::TCPListener( TCContainer *c, int p )
+{
+    container = c;
+    iter = NULL;
+    request_sp = NULL;
+    port = p;
+}
+
+void TCPListener::init()
+{
+    pthread_attr_t attr;
+    if (pthread_attr_init(&attr) != 0)
+        throw GenericError("pthread_attr_init() failed");
+
+    pthread_attr_setstacksize(&attr, SS_TUI);
+
+    if( pthread_create(&listener_tid,&attr,listener_thread_func,this) != 0 )
+        throw GenericError("pthread_create() returned an error.");
+}
+
+
+void TCPListener::stop()
+{
+       // pthread_join(listener_tid, NULL);
+}
+
+TCPListener::~TCPListener()
+{
+    stop();
+}
+
+// PRE:  *buff contains a connection with this format: 
+//       srcaddr:sport dstaddr:sport
+// POST: request_sp will store the SocketPair4
+int TCPListener::parse(char *buff)
+{
+    char *tmp;
+    struct in_addr saddr;
+    struct in_addr daddr;
+    unsigned short sport;
+    unsigned short dport;
+    IPv4Address* src;
+    IPv4Address* dst;
+   
+    request_sp = NULL;
+    
+    if ((strchr(buff, ':')) == (strrchr(buff, ':')))
+        return 0;
+    if (NULL == (strchr(buff, ' ')))
+        return 0;
+
+    // TODO: do a clever request check (regex?)
+    
+    tmp = strtok(buff, ":");
+    if (INADDR_NONE == (saddr.s_addr = inet_addr(tmp)))
+        return 0;
+
+    tmp = strtok(NULL, " ");
+    sport = atoi(tmp);
+
+    tmp = strtok(NULL, ":");
+    if (INADDR_NONE == (daddr.s_addr = inet_addr(tmp)))
+        return 0;
+    
+    tmp = strtok(NULL, "\n");
+    dport = atoi(tmp);
+
+    src = new IPv4Address(saddr);
+    dst = new IPv4Address(daddr);
+    request_sp = new SocketPair(*src, sport, *dst, dport);
+    delete src;
+    delete dst;
+
+    return 1;
+}
+
+void TCPListener::listener_serv(char *buffer)
+{
+        unsigned short int packets = 0;
+        unsigned short int state   = 0;
+        unsigned short int idle    = 0;
+
+        if (!parse(buffer)) {
+            send(conn, "-1 -1 -1\n", strlen("-1 -1 -1\n"), 0);
+            return;
+        }
+
+        if (!request_sp) {
+            send(conn, "-1 -1 -1\n", strlen("-1 -1 -1\n"), 0);
+            return;
+        }
+
+        container->lock();
+        iter = container->getSortedIteratorPtr();
+
+        SortedIterator *i = iter;
+        i->rewind();
+
+        while ( TCPConnection *ic = i->getNext() ) {
+
+            SocketPair *sp;
+
+            sp = new SocketPair ( ic->srcAddr(), ic->srcPort(),
+                                   ic->dstAddr(), ic->dstPort());
+
+            if (*request_sp == *sp) {
+                packets = ic->getPacketCount();
+                state   = ic->getState();
+                idle    = ic->getIdleSeconds();
+                delete sp;
+                break;
+            }
+
+            delete sp;
+        }
+
+        char *msg;
+        msg = (char *) malloc(sizeof(char) * 20);
+        sprintf(msg, "%d %d %d\n", packets, state, idle);
+        send(conn, msg, strlen(msg), 0);
+        free(msg);
+        
+        delete request_sp;
+        request_sp = NULL;
+        delete iter;
+        iter = NULL;
+        container->unlock();
+}
+
+void TCPListener::listener_run()
+{
+    // create socket
+    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 1)
+        throw GenericError("socket() returned an error.");
+
+    // server address
+    address.sin_family = AF_INET;
+    address.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
+    address.sin_port = htons(port);
+
+    if (bind(sock, (struct sockaddr *) &address, sizeof(address)) != 0)
+        throw GenericError("bind() returned an error.");
+
+    // listen connection
+    listen(sock, 10);
+    addrlen = sizeof(struct sockaddr_in);
+
+    for (;;)
+    {
+        if ((conn = accept(sock, (struct sockaddr *) &address, &addrlen)) < 1)
+            throw GenericError("accept() returned an error.");
+
+        char *buffer  = (char *) malloc(sizeof(char) * BUFSIZE);
+        recv(conn, buffer, BUFSIZE, 0);
+        listener_serv(buffer);
+        free(buffer);
+        close(conn);
+    }
+
+    // never reached..
+    close(sock);
+}
+
+void *listener_thread_func( void *arg )
+{
+    TCPListener *l = (TCPListener *) arg;
+    l->listener_run();
+    return NULL;
+}
+
+
diff -Nu tcptrack-1.4.2/src/TCPListener.h tcptrack-1.4.2.ossim/src/TCPListener.h
--- tcptrack-1.4.2/src/TCPListener.h	1970-01-01 01:00:00.000000000 +0100
+++ tcptrack-1.4.2.ossim/src/TCPListener.h	2011-09-12 14:32:25.000000000 +0200
@@ -0,0 +1,70 @@
+/* 
+ *  Ths code in this file is part of tcptrack. For more information see
+ *    http://www.rhythm.cx/~steve/devel/tcptrack
+ *
+ *     Copyright (C) Steve Benson - 2003
+ *
+ *  tcptrack is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your
+ *  option) any later version.
+ *   
+ *  tcptrack is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *   
+ *  You should have received a copy of the GNU General Public License
+ *  along with GNU Make; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 
+ *  
+ */
+#ifndef TCPLISTENER_H
+#define TCPLISTENER_H 1
+
+#include <pthread.h>
+#include "TCContainer.h"
+
+#define BUFSIZE 1024
+
+class TCPListener
+{
+public:
+    TCPListener( TCContainer *, int );
+    ~TCPListener();
+
+    void init(); // like a constructor, but exceptions can be thrown.
+    void stop();
+
+
+    // do not call. used as pthread_create callback.
+    void listener_run();
+
+private:
+
+    // display packets in here.
+    TCContainer *container;
+
+    // an iterator over connections in the container.
+    SortedIterator * iter;
+
+    // request socket pair
+    SocketPair *request_sp;
+
+    // port listening connections
+    int port;
+    
+    pthread_t listener_tid;
+
+    int         sock;
+    int         conn;
+    struct      sockaddr_in  address;
+    socklen_t   addrlen;
+    
+    void listener_serv(char *buffer);
+    int parse(char *buff);
+};
+
+void *listener_thread_func( void * );
+
+#endif
diff -Nu tcptrack-1.4.2/src/TCPTrack.cc tcptrack-1.4.2.ossim/src/TCPTrack.cc
--- tcptrack-1.4.2/src/TCPTrack.cc	2011-08-03 19:34:20.000000000 +0200
+++ tcptrack-1.4.2.ossim/src/TCPTrack.cc	2011-09-12 14:34:02.000000000 +0200
@@ -2,6 +2,7 @@
 #include <pthread.h>
 #include <iostream>
 #include <cstring>
+#include <unistd.h>
 #include <string>
 #include "TCPTrack.h"
 #include "AppError.h"
@@ -35,7 +36,12 @@
 	c = new TCContainer();
 	pb = new PacketBuffer();
 	s = new Sniffer();
-	ui = new TextUI(c);
+//	ui = new TextUI(c);
+	l = new TCPListener(c, cf.port);
+        if (cf.daemon == false)
+               	ui = new TextUI(c);
+        else if (daemon(0, 0))
+		throw GenericError("daemon() returned an error.");
 
 	try 
 	{
@@ -44,7 +50,10 @@
 		
 		// init() on these objects performs constructor-like actions,
 		// only they may throw exceptions. Constructors don't.
-		ui->init();
+		//ui->init();
+		l->init();
+                if (cf.daemon == false)
+                        ui->init();
 		s->init(cf.iface,cf.fexp,cf.test_file);
 		pb->init();
 
@@ -65,6 +74,9 @@
 	
 		// shut everything down cleanly.
 		ui->stop();
+		l->stop();
+                if (cf.daemon == false)
+                       ui->stop();
 		s->dest();
 		pb->dest();
 		c->stop();
@@ -79,7 +91,10 @@
 		s->dest();
 		pb->dest();
 		
-		delete ui;
+		//delete ui;
+		if (cf.daemon == false)
+                       delete ui;
+                delete l;
 		delete s;
 		delete pb;
 		delete c;
@@ -120,9 +135,11 @@
 
 void printusage(int argc,char **argv)
 {
-	printf("Usage: %s [-dfhvp] [-r <seconds>] -i <interface> [<filter expression>] [-T <pcap file]\n",argv[0]);
+	//printf("Usage: %s [-dfhvp] [-r <seconds>] -i <interface> [<filter expression>] [-T <pcap file]\n",argv[0]);
+	printf("Usage: %s [-dDfhvp] [-r <seconds>] [-P <port>] -i <interface> [<filter expression>] [-T <pcap file]\n",argv[0]);
 }
 
+
 struct config parseopts(int argc, char **argv)
 {
 	int o;
@@ -131,11 +148,14 @@
 	cf.fastmode=false;
 	cf.promisc=true;
 	cf.detect=true;
+	cf.port=40010;
+        cf.daemon=false;
 	cf.test_file=NULL;
 	cf.iface = NULL;
 	bool got_iface=false;
 
-	while( (o=getopt(argc,argv,"dhvfi:pr:T:")) > 0 )
+//	while( (o=getopt(argc,argv,"dhvfi:pr:T:")) > 0 )
+	while( (o=getopt(argc,argv,"dDhvfi:pP:r:T:")) > 0 )
 	{
 		if( o=='h' )
 		{
@@ -160,6 +180,10 @@
 			cf.detect=false;
 		if( o=='p' ) 
 			cf.promisc=false;
+		if ( o=='P' )
+                        cf.port = atoi(optarg);
+                if ( o=='D' )
+                        cf.daemon = true;
 		if( o=='T' )
 		{
 			cf.test_file=optarg;
diff -Nu tcptrack-1.4.2/src/TCPTrack.h tcptrack-1.4.2.ossim/src/TCPTrack.h
--- tcptrack-1.4.2/src/TCPTrack.h	2010-09-28 01:02:01.000000000 +0200
+++ tcptrack-1.4.2.ossim/src/TCPTrack.h	2011-09-12 14:24:53.000000000 +0200
@@ -8,6 +8,7 @@
 #include "TextUI.h"
 #include "PacketBuffer.h"
 #include "TCContainer.h"
+#include "TCPListener.h"
 
 using namespace std;
 
@@ -33,6 +34,7 @@
 	TextUI *ui;
 	PacketBuffer *pb;
 	TCContainer *c;
+	TCPListener *l;
 	
 	string ferr; // fatal error message sent from another thread
 	pthread_mutex_t ferr_lock;
diff -Nu tcptrack-1.4.2/src/util.h tcptrack-1.4.2.ossim/src/util.h
--- tcptrack-1.4.2/src/util.h	2010-09-28 01:02:22.000000000 +0200
+++ tcptrack-1.4.2.ossim/src/util.h	2011-09-12 14:11:13.000000000 +0200
@@ -49,6 +49,8 @@
 	bool fastmode; // faster average recalculation (more than once/sec).
 	bool detect; // detect pre-existing connections?
 	bool promisc; // enable promisc mode?	        
+	int port;
+        bool daemon;
 	char *test_file; // File to use as input data for a test
 };
 
